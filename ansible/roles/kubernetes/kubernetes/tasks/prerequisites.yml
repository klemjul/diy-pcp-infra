---
# tasks file for roles/kubernetes

- name: Install dependencies
  ansible.builtin.apt:
    name: "{{ kubernetes_prerequisites_packages }}"
    state: present
    update_cache: true
    cache_valid_time: 3600

- name: Disable swap
  ansible.builtin.command: swapoff -a
  register: __cmd_res
  changed_when: __cmd_res.rc != 0

- name: Remove SWAP in fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: "(.*)swap(.*)$"
    line: '#\1swap\2'
    backrefs: true

- name: Install containerd
  ansible.builtin.apt:
    name: containerd
    state: present

- name: Get checksum of containerd configuration
  ansible.builtin.stat:
    path: /etc/containerd/config.toml
  register: __containerd_toml_checksum_before

- name: Generate containerd config file
  ansible.builtin.command: containerd config default
  register: __containerd_config
  changed_when: __containerd_config.rc != 0

- name: Save containerd config file
  ansible.builtin.copy:
    content: "{{ __containerd_config.stdout }}"
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: "0750"
  changed_when: __containerd_config.rc != 0

- name: Change cgroup conf
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: "^(.*)SystemdCgroup = false(.*)$"
    line: '\1SystemdCgroup = true\2'
    backrefs: true
  changed_when: true

- name: Get checksum of containerd configuration after
  ansible.builtin.stat:
    path: /etc/containerd/config.toml
  register: __containerd_toml_checksum_after

- name: Restart containerd if needed
  ansible.builtin.service:
    name: containerd
    state: restarted
    enabled: true
  when: __containerd_toml_checksum_after.stat.checksum != __containerd_toml_checksum_before.stat.checksum

- name: Check if containerd file exists
  ansible.builtin.stat:
    path: /etc/modules-load.d/k8s.conf
  register: __containerd_modules_conf_exists

- name: Add containerd modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Create k8s.conf file if not exist
  ansible.builtin.copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
    owner: root
    group: root
    mode: 0750
  when: not __containerd_modules_conf_exists.stat.exists
  notify: RESTART_CONTAINERD

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Ensure containerd is started
  ansible.builtin.service:
    name: containerd
    state: started
    enabled: true

- name: Update sysctl config
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: "1"
    sysctl_set: true
    state: present
    reload: true
  loop:
    - "net.bridge.bridge-nf-call-ip6tables"
    - "net.bridge.bridge-nf-call-iptables"
    - "net.ipv4.ip_forward"

- name: Add a persistent file for sysctl config
  ansible.builtin.copy:
    dest: /etc/sysctl.d/99-k8s.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
    owner: root
    group: root
    mode: "0750"

- name: Check if repo already exists
  ansible.builtin.stat:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  register: __kubernetes_apt_key

- name: Check if repo already exists
  ansible.builtin.stat:
    path: /etc/apt/sources.list.d/kubernetes.list
  register: __kubernetes_apt_source

- name: Install the key
  ansible.builtin.shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_minor_version }}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
  when: not __kubernetes_apt_key.stat.exists
  tags:
    - skip_ansible_lint

- name: Install the repo
  ansible.builtin.shell: "echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_minor_version }}/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list"
  when: not __kubernetes_apt_source.stat.exists
  notify: UPDATE_APT_CACHE
  tags:
    - skip_ansible_lint

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Install Kubernetes packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 3600
  loop:
    - "kubelet={{ kubernetes_version }}"
    - "kubeadm={{ kubernetes_version }}"
    - "kubectl={{ kubernetes_version }}"

- name: Hold kubernetes packages
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl
