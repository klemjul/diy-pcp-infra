- name: Ensure ext4 file system exists
  community.general.filesystem:
    fstype: ext4
    dev: "{{ item.disk }}"
    force: false # Avoids reformatting if the filesystem already exists

- name: "Create group {{ item.owner }}"
  ansible.builtin.group:
    name: "{{ item.owner }}"
    system: yes
    state: present
  when: item.owner

- name: "Create user {{ item.owner }}"
  ansible.builtin.user:
    name: "{{ item.owner }}"
    system: yes
    shell: /sbin/nologin
    state: present
  when: item.owner

- name: Ensure mount directory exists
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.owner | default('root') }}"
    mode: "{{ item.mode | default('0750') }}"

- name: Retrieve UUID of the disk
  ansible.builtin.command:
    cmd: "blkid -s UUID -o value {{ item.disk }}"
  register: __volumes_uuid_disk
  changed_when: false
  failed_when: __volumes_uuid_disk.rc != 0 or __volumes_uuid_disk.stdout == ""

- name: Check if the mount entry exists in fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: "^UUID={{ __volumes_uuid_disk.stdout }}\\s+{{ item.path }}\\s+ext4"
    state: absent
  check_mode: yes
  register: __fstab_check
  changed_when: __fstab_check.found == 0

- name: Add mount entry to fstab if not present
  ansible.builtin.lineinfile:
    path: /etc/fstab
    line: "UUID={{ __volumes_uuid_disk.stdout }} {{ item.path }} ext4 rw,nofail,noatime,auto 0 2"
    state: present
  when: __fstab_check.found == 0

- name: Mount the file system
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "UUID={{ __volumes_uuid_disk.stdout }}"
    fstype: ext4
    opts: rw,nofail,noatime,auto
    state: mounted
